#!/bin/bash

shopt -s lastpipe

_sysz_help() {
  PROG=$(basename "$0")
  cat >&2 <<EOF
A utility for using systemctl interactively via fzf.

Usage: $PROG [OPT] [CMD] [ARGS...]

Select multiple units using TAB

Extra ARGS are passed to the systemctl command.

OPT:
  -u, --user             Only show --user services
  -s, --sys, --system    Only show --user services
  -a, --active           Only show active services
  -h, --help             Print this message

If no option is given, both system and user units are shown.

CMD:
  start                  systemctl start <unit>
  stop                   systemctl stop <unit>
  re, restart            systemctl restart <unit>
  s, stat, status        systemctl status <unit>
  ed, edit               systemctl edit --full <unit>
  reload                 systemctl reload <unit>
  en, enable             systemctl enable --now <unit>
  d, dis, disable        systemctl disable --now <unit>

If no command is given, one or more can be chosen interactively.

If only one unit is chosen, available commands will be presented
based on the state of the unit.

Examples:
  $PROG --system stat      Get the status of a system unit
  $PROG --user edit        Edit a user unit
  $PROG start              Start a unit
  $PROG -s -a stop         Stop an active system unit
  $PROG -u s -n100         Show status of a user unit with 100 log lines.
EOF

  exit 1
}

_sysz_systemctl() {
  if [[ $EUID -ne 0 && $1 = --system ]]; then
    # only run sudo if we aren't root and it's a system unit
    [[ $VERBOSE = true ]] && echo '>' sudo systemctl "$@"
    sudo systemctl "$@"
  else
    [[ $VERBOSE = true ]] && echo '>' systemctl "$@"
    systemctl "$@"
  fi
}

_sysz_journalctl() {
  if [[ $EUID -ne 0 && $1 = --system ]]; then
    # only run sudo if we aren't root and it's a system unit
    [[ $VERBOSE = true ]] && echo '>' sudo journalctl "$@"
    sudo journalctl "$@"
  else
    [[ $VERBOSE = true ]] && echo '>' journalctl "$@"
    journalctl "$@"
  fi
}

_sysz_preview() {
  case ${1%% *} in
  '[user]')
    MANAGER=--user
    ;;
  '[system]')
    MANAGER=--system
    ;;
  *)
    echo "ERROR: unknown manager: $PICK" >&2
    exit 1
    ;;
  esac
  UNIT=${1##* }

  SYSTEMD_COLORS=1 _sysz_systemctl $MANAGER status "$UNIT" --no-pager
}

_sysz_show() {
  _sysz_systemctl "$1" show "$2" -p "$3" --value
}

_sysz_list_cmd() {
  systemctl \
    "$1" \
    list-units \
    --all \
    --no-legend \
    --full \
    --no-pager \
    $ACTIVE |
    awk '{print $1}'

}

_sysz_sort() {
  while IFS= read -r string; do
    if [[ $string =~ \[user\].*\.service$ ]]; then
      # user services
      echo "0 $string"
    elif [[ $string =~ \.service$ ]]; then
      # system services
      echo "1 $string"
    elif [[ $string =~ \[user\].*\.timers$ ]]; then
      # user timers
      echo "2 $string"
    elif [[ $string =~ \.timer$ ]]; then
      # system timers
      echo "3 $string"
    elif [[ $string =~ \[user\].*\.socket$ ]]; then
      # user sockets
      echo "4 $string"
    elif [[ $string =~ \.socket$ ]]; then
      # system sockets
      echo "5 $string"
    elif [[ $string =~ \[user\] ]]; then
      # then user units based on file extenions
      echo "7${string##*.} $string"
    else
      # then the rest based on file extension
      echo "8${string##*.} $string"
    fi
  done | sort | cut -d' ' -f2-
}

_sysz_list() {
  if [[ $UNITS = user || $UNITS = all ]]; then
    _sysz_list_cmd --user | sed -e 's/^/[user] /'
  fi

  if [[ $UNITS = system || $UNITS = all ]]; then
    _sysz_list_cmd --system | sed -e 's/^/[system] /'
  fi
}

# main

UNITS=all
ACTIVE=
while [[ -n $1 ]]; do
  case $1 in
  -u | --user)
    UNITS=user
    shift
    ;;
  -s | --sys | --system)
    UNITS=system
    shift
    ;;
  -a | --active)
    ACTIVE="--state=active"
    shift
    ;;
  -v | --verbose)
    VERBOSE=true
    shift
    ;;
  -h | --help)
    _sysz_help
    ;;
  *)
    break
    ;;
  esac
done

CMD=
while :; do
  case $1 in
  _fzf_preview)
    shift
    _sysz_preview "$@"
    exit 0
    ;;
  h | help)
    _sysz_help
    ;;
  # Handle short names
  re)
    CMD=restart
    ;;
  s)
    CMD=status
    ;;
  ed)
    CMD=edit
    ;;
  en)
    CMD=enable
    ;;
  d | dis)
    CMD=disable
    ;;
  j)
    CMD=journal
    ;;
  f)
    CMD=follow
    ;;
  c)
    CMD="cat"
    ;;
  *)
    # assume the next argument is a command name
    CMD=$1
    ;;
  esac
  shift
  break
done

declare -a ARGS
ARGS=("$@")

declare -a PICKS
_sysz_list |
  _sysz_sort |
  fzf \
    --multi \
    --ansi \
    --prompt="Units: " \
    --preview="'${BASH_SOURCE[0]}' _fzf_preview {}" |
  readarray -t PICKS

if [[ ${#PICKS[@]} -eq 0 ]]; then
  exit 1
fi

printf -v PICKS_STR '%s\n' "${PICKS[@]}"

declare -a CMDS
if [[ -n $CMD ]]; then
  CMDS=("$CMD")
else
  fzf \
    --multi \
    --no-info \
    --reverse \
    --ansi \
    --preview="echo '$PICKS_STR'" \
    --prompt="Commands: " \
    < <(
      echo status
      [[ $ACTIVE_STATE = active || ${#PICKS[@]} -gt 1 ]] && echo restart
      [[ $ACTIVE_STATE != active || ${#PICKS[@]} -gt 1 ]] && printf '\033[0;32m%s\033[0m\n' start
      [[ $ACTIVE_STATE = active || ${#PICKS[@]} -gt 1 ]] && printf '\033[0;31m%s\033[0m\n' stop
      [[ $UNIT_FILE_STATE != enabled || ${#PICKS[@]} -gt 1 ]] && printf '\033[0;32m%s\033[0m\n' enable
      [[ $UNIT_FILE_STATE != enabled || ${#PICKS[@]} -gt 1 ]] && printf '\033[0;32m%s\033[0m\n' 'enable --now'
      [[ $UNIT_FILE_STATE = enabled || ${#PICKS[@]} -gt 1 ]] && printf '\033[0;31m%s\033[0m\n' disable
      [[ $UNIT_FILE_STATE = enabled || ${#PICKS[@]} -gt 1 ]] && printf '\033[0;31m%s\033[0m\n' 'disable --now'
      [[ $CAN_RELOAD = yes || ${#PICKS[@]} -gt 1 ]] && printf '\033[0;37m%s\033[0m\n' reload
      echo cat
      echo edit
      echo journal
      echo follow
    ) |
    readarray -t CMDS
fi

if [[ ${#CMDS[@]} -eq 0 ]]; then
  exit 1
fi

for PICK in "${PICKS[@]}"; do
  case ${PICK%% *} in
  '[user]')
    MANAGER=--user
    ;;
  '[system]')
    MANAGER=--system
    ;;
  *)
    echo "ERROR: unknown manager: $PICK" >&2
    exit 1
    ;;
  esac
  UNIT=${PICK##* }

  ACTIVE_STATE=$(_sysz_show $MANAGER "$UNIT" ActiveState)
  UNIT_FILE_STATE=$(_sysz_show $MANAGER "$UNIT" UnitFileState)
  CAN_RELOAD=$(_sysz_show $MANAGER "$UNIT" CanReload)

  for CMD in "${CMDS[@]}"; do
    case $CMD in
    journal)
      _sysz_journalctl $MANAGER -xe "--unit=$UNIT"
      ;;
    follow)
      _sysz_journalctl $MANAGER -xef "--unit=$UNIT"
      ;;
    status)
      # shellcheck disable=2086
      _sysz_systemctl $MANAGER $CMD "$UNIT" --no-pager "${ARGS[@]}"
      ;;
    cat)
      # shellcheck disable=2086
      _sysz_systemctl $MANAGER $CMD "$UNIT" "${ARGS[@]}"
      ;;
    *)
      # shellcheck disable=2086
      _sysz_systemctl $MANAGER $CMD "$UNIT" "${ARGS[@]}"
      _sysz_systemctl $MANAGER status "$UNIT" --no-pager
      ;;
    esac
  done

done
