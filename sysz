#!/usr/bin/env bash

#set -x
set -o pipefail
shopt -s lastpipe
shopt -s extglob

export SHELL=bash

PROG=$(basename "$0")
SYSZ_VERSION=1.4.3
SYSZ_HISTORY=${SYSZ_HISTORY:-${XDG_CACHE_HOME:-~/.cache}/sysz/history}
GREEN=$'\e[32m'
YELLOW=$'\e[33m'
RED=$'\e[31m'
declare -a MANAGERS
declare -a STATES
declare -a TYPES

_sysz_keys() {
  cat <<EOF
Keybindings:
  TAB           Toggle selection.
  ctrl-r        Run daemon-reload. Selection is reset.
  ctrl-x        Switch between user or system managers. Selection is reset.
  ctrl-s        Select states to match. Selection is reset.
  ctrl-t        Select types to match. Selection is reset.
  ctrl-v        'cat' the unit in the preview window.
  ctrl-p        History previous.
  ctrl-n        History next.
  ?             Show keybindings.
EOF
}

_sysz_help() {
  cat >&2 <<EOF
A utility for using systemctl interactively via fzf.

Usage: $PROG [OPTS...] [CMD] [-- ARGS...]

sudo is invoked automatically, if necessary.

If only one unit is chosen, available commands will be presented
based on the state of the unit (e.g. "start" only shows if unit is "active").

OPTS:
  -u, --user               Only show --user units
  --sys, --system          Only show --system units
  -s STATE, --state STATE  Only show units in STATE (repeatable)
  -t TYPE, --type TYPE     Only show units of TYPE (repeatable)
  -V, --verbose            Print the systemctl command
  -v, --version            Print the version
  -h, --help               Print this message

  If no options are given, both system and user units are shown.

CMD:
  start                  systemctl start <unit>
  stop                   systemctl stop <unit>
  r, restart             systemctl restart <unit>
  s, stat, status        systemctl status <unit>
  ed, edit               systemctl edit <unit>
  reload                 systemctl reload <unit>
  en, enable             systemctl enable <unit>
  d, dis, disable        systemctl disable <unit>
  c, cat                 systemctl cat <unit>

  If no command is given, one or more can be chosen interactively.

ARGS are passed to the systemctl command for each selected unit.

$(_sysz_keys)

History:
  $PROG is stored in $SYSZ_HISTORY
  This can be changed with the environment variable: SYSZ_HISTORY

Some units are colored based on state:
  green       active
  red         failed
  yellow      not-found

Examples:
  $PROG -u                        User units
  $PROG --sys -s active           Active system units
  $PROG --user --state failed     Failed user units
  $PROG --type socket             Sockets
  $PROG -s inactive -t service    Inactive services

Examples with commands:
  $PROG start                     Start a unit
  $PROG --sys s                   Get the status of system units
  $PROG --user edit               Edit user units
  $PROG s -- -n100                Show status with 100 log lines
  $PROG --sys -s active stop      Stop an active system unit
  $PROG -u --state failed r       Restart failed user units
EOF

  exit 0
}

_sysz_debug() {
  echo "$(date)" "$@" >>sysz.debug
}

_sysz_run() {
  [[ $VERBOSE = true ]] && _sysz_debug '>' "$@"
  "$@" || return $?
}

_sysz_systemctl() {
  if [[ $EUID -ne 0 && $1 = --system ]]; then
    # only run sudo if we aren't root and it's a system unit
    _sysz_run sudo systemctl "$@"
  else
    _sysz_run systemctl "$@"
  fi
}

_sysz_journalctl() {
  if [[ $1 = --user ]]; then
    # use --user-unit flag if it's a user unit
    _sysz_run journalctl --user-unit="$2" "${@:3}"
  else
    if [[ $EUID -ne 0 ]]; then
      # only run sudo if we aren't root
      _sysz_run sudo journalctl --unit="$2" "${@:3}"
    else
      _sysz_run journalctl --unit="$2" "${@:3}"
    fi
  fi

}

_sysz_manager() {
  case ${1%% *} in
  '[user]' | user)
    echo --user
    ;;
  '[system]' | system)
    echo --system
    ;;
  *)
    echo "ERROR: Unknown manager: $1" >&2
    exit 1
    ;;
  esac
}

_fzf_cat() {
  local MANAGER
  MANAGER=$(_sysz_manager "$1")
  local UNIT
  UNIT=${1##* }

  SYSTEMD_COLORS=1 systemctl "$MANAGER" cat -- "$UNIT"
}

_fzf_preview() {
  local mgr
  local unit
  IFS=" " read -r -a args <<<"$1"
  mgr=$(_sysz_manager "${args[0]}")
  unit=${args[1]}

  if [[ $unit = *@.* ]]; then
    _fzf_cat "$@"
  else
    SYSTEMD_COLORS=1 systemctl "$mgr" status --no-pager -- "$unit"
  fi
  exit 0
}

_sysz_show() {
  local manager
  manager=$(_sysz_manager "$1")
  local unit
  unit=${1##* }

  _sysz_systemctl "$manager" show "$unit" -p "$2" --value
}

_sysz_ls() {
  local color
  local state
  local filter
  local reset

  reset=$'\e[0m'
  color=$reset
  filter=DO_NOT_MATCH
  for arg in "$@"; do
    case $arg in
    --filter=*)
      filter=${arg#--filter=} # strip --filter=
      shift
      ;;
    --state=active)
      color=$GREEN
      ;;
    --state=not-found)
      color=$YELLOW
      ;;
    --state=failed)
      color=$RED
      ;;
    esac
  done

  case $state in
  esac

  for mgr in "${MANAGERS[@]}"; do
    _sysz_systemctl "--$mgr" \
      --legend=false \
      --full \
      --plain \
      --no-pager \
      --all \
      "$@" |
      grep -Ev '^\S+\s+(\S+\s+)?('"$filter"')' |
      sed -e "s/^/$color/;s/\$/$reset/" |
      sed -e "s/^/[$mgr] /"
  done
}

_sysz_units() {
  if [[ ${#STATES[@]} -gt 0 && ${#TYPES[@]} -gt 0 ]]; then
    for cmd in list-units list-unit-files; do
      for state in "${STATES[@]}"; do
        for unit_type in "${TYPES[@]}"; do
          _sysz_ls "$cmd" "--state=$state" "--type=$unit_type"
        done
      done
    done

  elif [[ ${#STATES[@]} -gt 0 ]]; then
    for cmd in list-units list-unit-files; do
      for state in "${STATES[@]}"; do
        for unit_type in service timer; do
          _sysz_ls "$cmd" "--state=$state" "--type=$unit_type"
        done
        _sysz_ls "$cmd" "--state=$state" |
          grep -Ev '^\[\S+\] \S+(\.service|\.timer)'
      done
    done

  elif [[ ${#TYPES[@]} -gt 0 ]]; then
    for unit_type in "${TYPES[@]}"; do
      for state in failed active not-found; do
        _sysz_ls list-units "--state=$state" "--type=$unit_type"
      done
      _sysz_ls "--filter=failed|active|not-found" list-units "--type=$unit_type"
    done

  else
    # failed service
    # failed timer
    # failed units
    # active service
    # active timer
    # active units
    # not-found
    # remaining service
    # remaining timer
    # remaining
    # templates
    for state in failed active; do
      # show all failed and active services and timers first
      _sysz_ls list-units "--state=$state" --type=service
      _sysz_ls list-units "--state=$state" --type=timer
      # show remaining failed and active units
      _sysz_ls list-units "--state=$state" |
        grep -Ev '^\[\S+\] \S+(\.service|\.timer)'
    done
    # show all not-found units
    _sysz_ls list-units --state=not-found
    # show remaining services
    _sysz_ls '--filter=failed|active|not-found' list-units --type=service
    # show remaining timers
    _sysz_ls '--filter=failed|active|not-found' list-units --type=timer
    # show all remaining units
    _sysz_ls '--filter=failed|active|not-found' list-units |
      grep -Ev '^\[\S+\] \S+(\.service|\.timer)'
    # show all templates
    _sysz_ls list-unit-files '*@.*'
  fi
}

# main

# check fzf version
MIN_FZF=0.27.1
if [[ "$(printf '%s\n' "$MIN_FZF" "$(fzf --version | cut -d' ' -f1)" | sort -V | head -n1)" != "$MIN_FZF" ]]; then
  echo "ERROR: fzf >= $MIN_FZF required" >&2
  echo "https://github.com/junegunn/fzf#upgrading-fzf" >&2
  exit 1
fi

# root does not have user units
if [[ $EUID -eq 0 ]]; then
  MANAGERS=(system)
else
  MANAGERS=(user system)
fi

declare -a STATES
while [[ -n $1 ]]; do
  case $1 in
  -u | --user)
    MANAGERS=(user)
    shift
    ;;
  --sys | --system)
    MANAGERS=(system)
    shift
    ;;
  -s | --state)
    STATES+=("$2")
    shift
    shift
    ;;
  --state=*)
    STATES+=("${1#--state=}")
    shift
    ;;
  -t | --type)
    TYPES+=("$2")
    shift
    shift
    ;;
  --type=*)
    TYPES+=("${1#--type=}")
    shift
    ;;
  -v | --version)
    echo "$PROG" $SYSZ_VERSION
    exit 0
    ;;
  -V | --verbose)
    VERBOSE=true
    shift
    ;;
  -h | --help)
    _sysz_help
    ;;
  *)
    break
    ;;
  esac
done

_sysz_check_states() {
  for state in "${STATES[@]}"; do
    if [[ -n $state ]] && ! systemctl --state=help | grep -v : | grep -q "^${state}$"; then
      echo "ERROR: Invalid state: $state" >&2
      exit 1
    fi
  done
}

_sysz_check_types() {
  for unit_type in "${TYPES[@]}"; do
    if [[ -n $unit_type ]] && ! systemctl --type=help | tail -n +2 | grep -q "^${unit_type}$"; then
      echo "ERROR: Invalid type: $unit_type" >&2
      exit 1
    fi
  done
}

_sysz_check_states
_sysz_check_types

declare CMD
declare -a ARGS
while [[ -n $1 ]]; do
  case $1 in
  _fzf_preview)
    shift
    _fzf_preview "$@"
    exit 0
    ;;
  _fzf_cat)
    shift
    _fzf_cat "$@"
    exit 0
    ;;
  _sysz_units)
    _sysz_units
    exit 0
    ;;
  h | help)
    _sysz_help
    ;;
  # Handle short names
  re)
    CMD=restart
    ;;
  s)
    CMD=status
    ;;
  ed)
    CMD=edit
    ;;
  en)
    CMD=enable
    ;;
  d | dis)
    CMD=disable
    ;;
  j)
    CMD=journal
    ;;
  f)
    CMD=follow
    ;;
  c)
    CMD="cat"
    ;;
  --)
    shift
    ARGS=("$@")
    break
    ;;
  -*)
    echo "ERROR: Unknown option: $1" 2>&1
    exit 1
    ;;
  *)
    # assume the next argument is a command name
    CMD=$1
    ;;
  esac
  shift
done

mkdir -p "$(dirname "$SYSZ_HISTORY")"
touch "$SYSZ_HISTORY"

function join_by {
  # https://stackoverflow.com/a/17841619/334632
  local d=${1-} f=${2-}
  if shift 2; then
    printf %s "$f" "${@/#/$d}"
  fi
}

_sysz_manager_prompt() {
  if [[ $EUID -eq 0 ]]; then
    echo system
    return
  fi

  (
    echo user
    echo system
  ) |
    fzf \
      --multi \
      --no-info \
      --prompt="Manager: " |
    readarray -t MANAGERS || exit $?
}

_sysz_daemon_reload_prompt() {
  (
    if [[ $EUID -ne 0 ]]; then
      echo '[user] daemon-reload'
    fi
    echo '[system] daemon-reload'
  ) |
    fzf \
      --multi \
      --no-info \
      --prompt="Reload: " |
    readarray -t RELOADS || exit $?

  for RELOAD in "${RELOADS[@]}"; do
    case $RELOAD in
    '[user] daemon-reload')
      _sysz_systemctl --user daemon-reload >&2
      ;;
    '[system] daemon-reload')
      _sysz_systemctl --system daemon-reload >&2
      ;;
    esac
  done
}

_sysz_states_prompt() {
  local picked_states
  # hide 'ing' because they are transient states
  # which people probably aren't looking for
  (
    echo '(all)'
    systemctl --state=help |
      grep -v ':' |
      grep -v 'ing' |
      sort -u |
      grep -v '^$'
  ) |
    fzf \
      --multi \
      --prompt="States: " |
    readarray -t picked_states || exit $?

  STATES=()
  for state in "${picked_states[@]}"; do
    if [[ $state = '(all)' ]]; then
      STATES=()
      return
    fi
    STATES+=("$state")
  done
  _sysz_check_states
}

_sysz_types_prompt() {
  local picked
  (
    echo '(all)'
    echo service
    echo timer
    systemctl --type=help |
      grep -v ':' |
      grep -Ev '(service|timer)' |
      sort -u |
      grep -v '^$'
  ) |
    fzf \
      --multi \
      --no-sort \
      --prompt="types: " |
    readarray -t picked || exit $?

  TYPES=()
  for type in "${picked[@]}"; do
    if [[ $type = '(all)' ]]; then
      TYPES=()
      return
    fi
    TYPES+=("$type")
  done
  _sysz_check_types
}

while :; do
  UNITS=()
  KEY=

  # prompt units
  _sysz_units |
    fzf \
      --multi \
      --ansi \
      --expect=ctrl-r,ctrl-s,ctrl-x,ctrl-t \
      --history="$SYSZ_HISTORY" \
      --prompt="Units: " \
      --header '? for keybindings' \
      --bind "?:preview(echo '$(_sysz_keys)')" \
      --bind "ctrl-v:preview('${BASH_SOURCE[0]}' _fzf_cat {})" \
      --preview="'${BASH_SOURCE[0]}' _fzf_preview {}" \
      --preview-window=60% |
    readarray -t PICKS

  KEY=${PICKS[0]}
  [[ $VERBOSE = true ]] && echo "KEY: $KEY" >&2
  UNITS=("${PICKS[@]:1}")

  case $KEY in
  ctrl-r)
    _sysz_daemon_reload_prompt
    continue
    ;;
  ctrl-t)
    _sysz_types_prompt
    continue
    ;;
  ctrl-s)
    _sysz_states_prompt
    continue
    ;;
  ctrl-x)
    _sysz_manager_prompt
    continue
    ;;
  esac

  if [[ ${#UNITS[@]} -eq 0 ]]; then
    exit 1
  fi

  break

done

[[ $VERBOSE = true ]] && printf 'UNIT: %s\n' "${UNITS[@]}" >&2

declare -a CMDS
if [[ -n $CMD ]]; then
  CMDS=("$CMD")
else

  if [[ ${#UNITS[@]} -gt 1 ]]; then
    printf -v PREVIEW '%s\n' "${UNITS[@]}"
    PREVIEW_CMD="echo -n '$PREVIEW'"
    MULTI=true
  else
    UNIT=${UNITS[0]}

    if [[ $UNIT = *@.* ]]; then
      read -r -p "$UNIT requires a parameter: " PARAM ||
        if [[ -z $PARAM ]]; then
          echo "ERROR: $UNIT requires a parameter"
          exit 1
        fi

      UNIT=${UNIT/\@/\@${PARAM}}
      UNITS[0]=$UNIT
    fi

    ACTIVE_STATE=$(_sysz_show "$UNIT" ActiveState)
    LOAD_STATE=$(_sysz_show "$UNIT" LoadState)
    UNIT_FILE_STATE=$(_sysz_show "$UNIT" UnitFileState)
    CAN_RELOAD=$(_sysz_show "$UNIT" CanReload)
    PREVIEW_CMD="'${BASH_SOURCE[0]}' _fzf_preview '$UNIT'"
  fi

  # prompt commands
  fzf \
    --multi \
    --ansi \
    --no-info \
    --no-sort \
    --prompt="Commands: " \
    --preview="$PREVIEW_CMD" \
    --preview-window=80% < <(
      # status
      echo status "${ARGS[*]}"
      # restart
      [[ $MULTI = true || $ACTIVE_STATE = active ]] &&
        printf '\033[0;31m%s\033[0m %s\n' restart "${ARGS[*]}" # red
      # start
      [[ $MULTI = true || $ACTIVE_STATE != active ]] &&
        printf '\033[0;32m%s\033[0m %s\n' start "${ARGS[*]}" # green
      # stop
      [[ $MULTI = true || $ACTIVE_STATE = active ]] &&
        printf '\033[0;31m%s\033[0m %s\n' stop "${ARGS[*]}" # red
      # enable
      [[ $MULTI = true || $UNIT_FILE_STATE != enabled ]] &&
        {
          printf '\033[0;32m%s\033[0m %s\n' "enable" "${ARGS[*]}" # green
          printf '\033[0;32m%s\033[0m %s\n' "enable" "--now ${ARGS[*]}"
        }
      # disable
      [[ $MULTI = true || $UNIT_FILE_STATE = enabled ]] &&
        {
          printf '\033[0;31m%s\033[0m %s\n' disable "${ARGS[*]}" # red
          printf '\033[0;31m%s\033[0m %s\n' disable "--now ${ARGS[*]}"
        }

      # journal
      echo journal "${ARGS[*]}"
      echo follow "${ARGS[*]}"

      # reload
      [[ $MULTI = true || $CAN_RELOAD = yes ]] &&
        printf '\033[0;37m%s\033[0m %s\n' reload "${ARGS[*]}" # green

      # mask
      [[ $MULTI = true || ($UNIT_FILE_STATE != masked && $LOAD_STATE != masked) ]] &&
        printf '\033[0;31m%s\033[0m %s\n' mask "${ARGS[*]}" # red
      [[ $MULTI = true || $UNIT_FILE_STATE = masked || $LOAD_STATE = masked ]] &&
        printf '\033[0;32m%s\033[0m %s\n' unmask "${ARGS[*]}" # green

      # cat
      echo cat "${ARGS[*]}"
      # edit
      echo edit "${ARGS[*]}"
      # show
      echo show "${ARGS[*]}"
    ) |
    readarray -t CMDS || exit $?
fi

if [[ ${#CMDS[@]} -eq 0 ]]; then
  exit 1
fi

for PICK in "${UNITS[@]}"; do

  MANAGER=$(_sysz_manager "$PICK")
  UNIT=${PICK##* }

  for CMD in "${CMDS[@]}"; do
    case ${CMD%% *} in
    journal)
      _sysz_journalctl "$MANAGER" "$UNIT" -xe "${ARGS[@]}"
      ;;
    follow)
      _sysz_journalctl "$MANAGER" "$UNIT" -xef "${ARGS[@]}"
      ;;
    status)
      # shellcheck disable=2086
      SYSTEMD_COLORS=1 _sysz_systemctl "$MANAGER" $CMD --no-pager "${ARGS[@]}" -- "$UNIT"
      ;;
    cat | show)
      _sysz_systemctl "$MANAGER" "$CMD" "${ARGS[@]}" -- "$UNIT" || exit $?
      ;;
    *)
      # shellcheck disable=2086
      _sysz_systemctl "$MANAGER" $CMD "${ARGS[@]}" -- "$UNIT" || CODE=$?
      SYSTEMD_COLORS=1 _sysz_systemctl "$MANAGER" status --no-pager -- "$UNIT"
      if [[ ${#UNITS[@]} -eq 1 ]]; then
        exit $CODE
      fi
      ;;
    esac
  done
done
