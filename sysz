#!/bin/bash

shopt -s lastpipe

_sysz_help() {
  PROG=$(basename "$0")
  cat >&2 <<EOF
A utility for using systemctl interactively via fzf.
If no command is given, one can be chosen interactively.
If no option is give, both system and user units are shown.

Usage: $PROG [OPT] [CMD] [args...]

OPT:
  -u, --user             Only show --user services
  -s, --sys, --system    Only show --user services
  -h, --help             Print this message

CMD:
  start                  systemctl start <unit>
  stop                   systemctl stop <unit>
  re, restart            systemctl restart <unit>
  s, stat, status        systemctl status <unit>
  ed, edit               systemctl edit --full <unit>
  en, enable             systemctl enable --now <unit>
  d, dis, disable        systemctl disable --now <unit>
  h, help                Print this message

Examples:
  $PROG --system stat      Get the status of a system unit
  $PROG --user --edit      Edit a user unit
  $PROG start              Start a unit
  $PROG -u s -n100         Show status of a user unit with 100 log lines
EOF

  exit 1
}

SYSZ_UNITS=all

while :; do
  case $1 in
  -u | --user)
    SYSZ_UNITS=user
    ;;
  -s | --sys | --system)
    SYSZ_UNITS=system
    ;;
  -h | --help)
    _sysz_help
    ;;
  *)
    break
    ;;
  esac
  shift
done

_sysz_systemctl() {
  if [[ $1 = '[system]' ]]; then
    manager='--system'
  elif [[ $1 = '[user]' ]]; then
    manager='--user'
  else
    echo "Manager prefix is missing" >&2
    exit 1
  fi
  shift
  local unit=$1
  shift
  local cmd=$1
  shift
  if [[ $EUID -ne 0 && $manager = "--system" ]]; then
    # only run sudo if we aren't root and it's a system unit
    sudo systemctl $manager $cmd $unit $@
  else
    systemctl $manager $cmd $unit $@
  fi
}

_sysz_preview() {
  export SYSTEMD_COLORS=1
  _sysz_systemctl $@ status --no-pager
  # TODO timer calendar

}

CMD=
while :; do
  case $1 in
  start)
    CMD=start
    ;;
  stop)
    CMD=stop
    ;;
  re | restart)
    CMD=restart
    ;;
  s | stat | status)
    CMD=status
    ;;
  ed | edit)
    CMD=edit
    ;;
  en | enable)
    CMD=enable
    ;;
  d | dis | disable)
    CMD=disable
    ;;
  h | help)
    _sysz_help
    ;;
  preview)
    shift
    _sysz_preview $@
    exit 0
    ;;
  *)
    break
    ;;
  esac
  shift
  break
done

_sysz_list() {
  systemctl $1 list-unit-files --no-legend --full --type=service --type=timer --no-pager | awk '{print $1}'
}

PICK=
(
  [[ $SYSZ_UNITS = "user" || $SYSZ_UNITS = "all" ]] && _sysz_list --user | sed -e 's/^/[user] /'
  [[ $SYSZ_UNITS = "system" || $SYSZ_UNITS = "all" ]] && _sysz_list --system | sed -e 's/^/[system] /'
) | fzf --multi --ansi --preview="'${BASH_SOURCE[0]}' preview {}" |
  read -r PICK

if [[ -z $PICK ]]; then
  exit 1
fi

if [[ -z $CMD ]]; then
  # TODO filter based on status
  CMD=$(fzf --reverse --ansi --prompt="Select systemctl command:" < <(
    printf '\033[0;37m%s\033[0m\n' status
    printf '\033[0;37m%s\033[0m\n' restart
    printf '\033[0;32m%s\033[0m\n' start
    printf '\033[0;31m%s\033[0m\n' stop
    printf '\033[0;32m%s\033[0m\n' enable
    printf '\033[0;31m%s\033[0m\n' disable
    printf '\033[0;37m%s\033[0m\n' edit
  ))
fi

if [[ -z $CMD ]]; then
  exit 1
fi

case $CMD in
enable | disable)
  CMD="$CMD --now"
  ;;
esac

_sysz_systemctl $PICK $CMD "$@"
if [[ $CMD != status ]]; then
  _sysz_systemctl $PICK status --no-pager
fi
