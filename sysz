#!/bin/bash

set -f # disable globbing
shopt -s lastpipe

_sysz_help() {
  PROG=$(basename "$0")
  cat >&2 <<EOF
A utility for using systemctl interactively via fzf.

Usage: $PROG [OPTS...] [CMD] [ARGS...]

Select multiple units using TAB

Extra ARGS are passed to the systemctl command
for each selected unit.

sudo is automatically invoked if necessary.

OPTS:
  -u, --user             Only show --user units
  -s, --sys, --system    Only show --user units
  --state [STATE]        Only show units in STATE
  -v, --verbose          Print the systemctl command
  -h, --help             Print this message

If no option is given, both system and user units are shown.

CMD:
  start                  systemctl start <unit>
  stop                   systemctl stop <unit>
  r, restart             systemctl restart <unit>
  s, stat, status        systemctl status <unit>
  ed, edit               systemctl edit --full <unit>
  reload                 systemctl reload <unit>
  en, enable             systemctl enable --now <unit>
  d, dis, disable        systemctl disable --now <unit>

If no command is given, one or more can be chosen interactively.

If only one unit is chosen, available commands will be presented
based on the state of the unit.

$PROG stores history in the file specificed by the
environment variable SYSZ_HISTORY
Default: $XDG_CACHE_HOME/sysz/history

Examples:
  $PROG -u                      User units
  $PROG -s --state active       Active system units
  $PROG --user --state failed   Failed user units

Examples with commands:
  $PROG start                     Start a unit
  $PROG --sys s                   Get the status of a system unit
  $PROG --user edit               Edit a user unit
  $PROG s -n100                   Show 100 log lines of units
  $PROG -s --state active stop    Stop an active system unit
  $PROG --state failed r          Restart failed units
EOF

  exit 1
}

_sysz_systemctl() {
  if [[ $EUID -ne 0 && $1 = --system ]]; then
    # only run sudo if we aren't root and it's a system unit
    [[ $VERBOSE = true ]] && echo '>' sudo systemctl "$@"
    sudo systemctl "$@"
  else
    [[ $VERBOSE = true ]] && echo '>' systemctl "$@"
    systemctl "$@"
  fi
}

_sysz_journalctl() {
  if [[ $EUID -ne 0 && $1 = --system ]]; then
    # only run sudo if we aren't root and it's a system unit
    [[ $VERBOSE = true ]] && echo '>' sudo journalctl "$@"
    sudo journalctl "$@"
  else
    [[ $VERBOSE = true ]] && echo '>' journalctl "$@"
    journalctl "$@"
  fi
}

_sysz_preview() {
  case ${1%% *} in
  '[user]')
    MANAGER=--user
    ;;
  '[system]')
    MANAGER=--system
    ;;
  *)
    echo "ERROR: unknown manager: $1" >&2
    exit 1
    ;;
  esac
  UNIT=${1##* }

  SYSTEMD_COLORS=1 _sysz_systemctl $MANAGER status "$UNIT" --no-pager
}

_sysz_show() {
  local MANAGER
  case ${1%% *} in
  '[user]')
    MANAGER=--user
    ;;
  '[system]')
    MANAGER=--system
    ;;
  *)
    echo "ERROR: unknown manager: $PICK" >&2
    exit 1
    ;;
  esac
  UNIT=${1##* }
  _sysz_systemctl $MANAGER show "$UNIT" -p "$2" --value
}

_sysz_sort() {
  while IFS= read -r string; do
    if [[ $string =~ \[user\].*\.service$ ]]; then
      # user services
      echo "0 $string"
    elif [[ $string =~ \.service$ ]]; then
      # system services
      echo "1 $string"
    elif [[ $string =~ \[user\].*\.timer$ ]]; then
      # user timers
      echo "2 $string"
    elif [[ $string =~ \.timer$ ]]; then
      # system timers
      echo "3 $string"
    elif [[ $string =~ \[user\].*\.socket$ ]]; then
      # user sockets
      echo "4 $string"
    elif [[ $string =~ \.socket$ ]]; then
      # system sockets
      echo "5 $string"
    elif [[ $string =~ \[user\] ]]; then
      # then user units based on file extenions
      echo "6${string##*.} $string"
    else
      # then the rest based on file extension
      echo "9${string##*.} $string"
    fi
  done | sort | cut -d' ' -f2-
}

_sysz_list_cmd() {
  local ARGS
  declare -a ARGS
  ARGS=(
    --all
    --no-legend
    --full
    --plain
    --no-pager
    "${STATES[@]}"
    "$@"
  )
  (
    systemctl list-units "${ARGS[@]}"
    systemctl list-unit-files "${ARGS[@]}"
  ) | awk '{print $1}'
}

_sysz_list_units() {
  (
    if [[ $UNITS = user || $UNITS = all ]]; then
      _sysz_list_cmd --user | sed -e 's/^/[user] /'
    fi

    if [[ $UNITS = system || $UNITS = all ]]; then
      _sysz_list_cmd --system | sed -e 's/^/[system] /'
    fi
  ) | uniq | _sysz_sort
}

# main

UNITS=all
declare -a STATES
while [[ -n $1 ]]; do
  case $1 in
  -u | --user)
    UNITS=user
    shift
    ;;
  -s | --sys | --system)
    UNITS=system
    shift
    ;;
  --state)
    shift
    STATES+=("--state=$1")
    shift
    ;;
  -v | --verbose)
    VERBOSE=true
    shift
    ;;
  -h | --help)
    _sysz_help
    ;;
  *)
    break
    ;;
  esac
done

if [[ -n $STATE ]] && ! systemctl --state=help | grep -q "^$STATE "; then
  echo "ERROR: unknown state: $STATE" >&2
  exit 1
fi

declare CMD
while :; do
  case $1 in
  _fzf_preview)
    shift
    _sysz_preview "$@"
    exit 0
    ;;
  h | help)
    _sysz_help
    ;;
  # Handle short names
  re)
    CMD=restart
    ;;
  s)
    CMD=status
    ;;
  ed)
    CMD=edit
    ;;
  en)
    CMD=enable
    ;;
  d | dis)
    CMD=disable
    ;;
  j)
    CMD=journal
    ;;
  f)
    CMD=follow
    ;;
  c)
    CMD="cat"
    ;;
  *)
    # assume the next argument is a command name
    CMD=$1
    ;;
  esac
  shift
  break
done

declare -a ARGS
ARGS=("$@")

SYSZ_HISTORY=${SYSZ_HISTORY:-${XDG_CACHE_HOME:-~/.cache}/sysz/history}
mkdir -p "$(dirname "$SYSZ_HISTORY")"
touch "$SYSZ_HISTORY"

_sysz_list_units |
  fzf \
    --multi \
    --ansi \
    --reverse \
    --no-sort \
    --history="$SYSZ_HISTORY" \
    --prompt="Units: " \
    --preview="'${BASH_SOURCE[0]}' _fzf_preview {}" |
  readarray -t PICKS

if [[ ${#PICKS[@]} -eq 0 ]]; then
  exit 1
fi

printf -v PICKS_STR '%s\n' "${PICKS[@]}"

declare -a CMDS
if [[ -n $CMD ]]; then
  CMDS=("$CMD")
else
  if [[ ${#PICKS[@]} -eq 1 ]]; then
    ACTIVE_STATE=$(_sysz_show "${PICKS[0]}" ActiveState)
    UNIT_FILE_STATE=$(_sysz_show "${PICKS[0]}" UnitFileState)
    CAN_RELOAD=$(_sysz_show "${PICKS[0]}" CanReload)
    PREVIEW="'${BASH_SOURCE[0]}' _fzf_preview '${PICKS[0]}'"
  else
    PREVIEW="echo '$PICKS_STR'"
    MULTI=true
  fi

  fzf \
    --multi \
    --ansi \
    --no-info \
    --reverse \
    --no-sort \
    --preview="$PREVIEW" \
    --prompt="Commands: " \
    < <(
      echo status "${ARGS[*]}"
      [[ $MULTI = true || $ACTIVE_STATE = active ]] && printf '\033[0;31m%s\033[0m %s\n' restart "${ARGS[*]}"
      [[ $MULTI = true || $ACTIVE_STATE = inactive ]] && printf '\033[0;32m%s\033[0m %s\n' start "${ARGS[*]}"
      [[ $MULTI = true || $ACTIVE_STATE = active ]] && printf '\033[0;31m%s\033[0m %s\n' stop "${ARGS[*]}"
      [[ $MULTI = true || $UNIT_FILE_STATE = disabled ]] && printf '\033[0;32m%s\033[0m %s\n' "enable" "${ARGS[*]}"
      [[ $MULTI = true || $UNIT_FILE_STATE = disabled ]] && printf '\033[0;32m%s\033[0m %s\n' "enable" "--now ${ARGS[*]}"
      [[ $MULTI = true || $UNIT_FILE_STATE = enabled ]] && printf '\033[0;31m%s\033[0m %s\n' disable "${ARGS[*]}"
      [[ $MULTI = true || $UNIT_FILE_STATE = enabled ]] && printf '\033[0;31m%s\033[0m %s\n' disable "--now ${ARGS[*]}"
      [[ $MULTI = true || $CAN_RELOAD = yes ]] && printf '\033[0;37m%s\033[0m %s\n' reload "${ARGS[*]}"
      echo cat "${ARGS[*]}"
      echo edit "${ARGS[*]}"
      echo journal "${ARGS[*]}"
      echo follow "${ARGS[*]}"
    ) |
    readarray -t CMDS
fi

if [[ ${#CMDS[@]} -eq 0 ]]; then
  exit 1
fi

for PICK in "${PICKS[@]}"; do
  case ${PICK%% *} in
  '[user]')
    MANAGER=--user
    ;;
  '[system]')
    MANAGER=--system
    ;;
  *)
    echo "ERROR: unknown manager: $PICK" >&2
    exit 1
    ;;
  esac
  UNIT=${PICK##* }

  for CMD in "${CMDS[@]}"; do
    case ${CMD%% *} in
    journal)
      _sysz_journalctl $MANAGER -xe "--unit=$UNIT" "${ARGS[@]}"
      ;;
    follow)
      _sysz_journalctl $MANAGER -xef "--unit=$UNIT" "${ARGS[@]}"
      ;;
    status)
      # shellcheck disable=2086
      _sysz_systemctl $MANAGER $CMD "$UNIT" --no-pager "${ARGS[@]}"
      ;;
    cat)
      # shellcheck disable=2086
      _sysz_systemctl $MANAGER $CMD "$UNIT" "${ARGS[@]}"
      ;;
    *)
      # shellcheck disable=2086
      _sysz_systemctl $MANAGER $CMD "$UNIT" "${ARGS[@]}" || CODE=$?
      _sysz_systemctl $MANAGER status "$UNIT" --no-pager
      if [[ ${#PICKS[@]} -eq 1 ]]; then
        exit $CODE
      fi
      ;;
    esac
  done

done
